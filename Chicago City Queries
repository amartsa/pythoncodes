The following list provides assorted complex Neo4j queries aimed at providing clustering and re-labelling without the use of the APOC library
for the Chicago City Dataset




1) Which are the most prevalent factors for accidents among [Distraction Related, Alcohol Related, Street, and Weather] in descending order? What's their probability of happening?

MATCH (dist:DistractRel)<-[:DISTRACTED]-(a:Accident)-[:WAS_DUI]->(alc:AlcoholRel) OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:WEATHER]->(weath:Weather)
WITH [dist.was, alc.was, st.StreetName, weath.was] AS FactPair
WITH toFloat(COUNT(FactPair)) as frequency, FactPair
WITH toFloat(sum(frequency)) AS total, frequency, FactPair
WITH round ( 10000 * (frequency / 115000)) / 10000  AS prob, frequency, FactPair
RETURN frequency, FactPair, prob ORDER BY frequency DESC LIMIT 1000
	
2) Which factors [Alcohol Related, Weather, Distraction Related, Hour of Day]  are the most prevalent in the streets with more than 100 accidents?

MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)
WITH COUNT(st) as frequency, st 
WHERE frequency >= 100 
WITH collect(st.StreetName) AS list, st

OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:WAS_DUI]->(alc:AlcoholRel) 
OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:WEATHER]->(weath:Weather)
OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:DISTRACTED]->(dist:DistractRel)
OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:HAPPENED_AT]->(hour:Hour)

WHERE st.StreetName IN list
WITH [dist.was, alc.was, hour.hourid, weath.was] AS FactPair, list, st
WITH toFloat(COUNT(FactPair)) as frequency, FactPair, list, st
WITH toFloat(sum(frequency)) AS total, frequency, FactPair, list, st
WITH round ( 10000 * (frequency / 115000)) / 10000  AS prob, frequency, FactPair, list, st
RETURN st.StreetName,  FactPair, frequency ORDER BY frequency DESC

3) How do we extract those Accidents where NO ALCOHOL and NO DISTRACTION were involved?
MATCH (dist:DistractRel)<-[r2]-(a:Accident)-[r]->(alc:AlcoholRel)
WHERE alc.was = 'N' AND dist.was = 'N'
WITH collect(a) AS list
RETURN list

4) Create a randomized list of 3) to make Autonomous Vehicle labels
MATCH (dist:DistractRel)<-[r2]-(a:Accident)-[r]->(alc:AlcoholRel)
WHERE alc.was = 'N' AND dist.was = 'N'
WITH collect(a.seq) as lseq
WITH size(lseq)/2 AS sizel, lseq
WITH apoc.coll.randomItems(lseq, sizel, false) AS randlist
UNWIND randlist as randnums
OPTIONAL MATCH (a2:Accident)
WHERE a2.seq = randnums
SET a2:AutoV

5) Create Non-Autonomous Vehicle labels to the rest of the accidents
MATCH (acc:Accidents)
WHERE NOT acc:AutoV
SET acc:NonAutoV

5) We can check that the sum of those without AutoV Label and those with the AutoV label sum up our 115000 original accidents
MATCH (nonav:NonAutoV) OPTIONAL MATCH (av:AutoV)
WITH (count(nonav)+count(av)) AS total
RETURN total

6) Make list of intersections where AV and NonAV's collided
MATCH (a:AutoV)-[]-(int:Intersections)-[]-(a2:NonAutoV)
WHERE toString(a.intName) = toString(a2.intName)
RETURN DISTINCT int.IntName AS Intersections, count(*) as times ORDER BY times DESC

7) Where to put roadblocks in streets with most accidents related to Alcohol or Distraction on Friday after 8pm

MATCH (dist:DistractRel)<-[:DISTRACTED]-(a:Accident)-[:WAS_DUI]->(alc:AlcoholRel) 
OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:DAY_OF_WEEK]->(dow:DayOfWeek) 
OPTIONAL MATCH (st:Streets)<-[:LOCATED_AT]-(a:Accident)-[:HOUR_OF_DAY]->(hr:Hour)
WHERE hr.hour >=20
WITH [dist.was, alc.was, st.StreetName, dow.number] AS FactPair, dist, alc, st, dow
WITH toFloat(COUNT(FactPair)) as frequency, FactPair, dist, alc, st, dow
WITH toFloat(sum(frequency)) AS total, frequency, FactPair, dist, alc, st, dow
WITH round ( 10000 * (frequency / 115000)) / 10000  AS prob, frequency, FactPair, dist, alc, st, dow
WHERE (toString(dist.was) = 'Y' OR toString(alc.was) = 'Y') AND toString(dow.number) = 'Friday'
RETURN frequency, FactPair ORDER BY frequency DESC LIMIT 1000

